;; Pool smartcontract

(slice, int) dict_get?(cell dict, int key_len, slice index) asm(index dict key_len) "DICTGET" "NULLSWAPIFNOT";
(slice, slice, int) dict_get_next?(cell dict, int key_len, slice pivot) asm(pivot dict key_len -> 1 0 2) "DICTGETNEXT" "NULLSWAPIFNOT" "NULLSWAPIFNOT";
(tuple) new_tuple() asm "NIL";
(tuple, ()) ~append_int(tuple t1, int t2) asm(t1 t2) "COMMA";

() store_data(seqno, pubkey, config, transfers, whitelist, admins, grams) impure {
  set_data(begin_cell()
    .store_uint(seqno, 32)
    .store_uint(pubkey, 256)
    .store_dict(config)
    .store_dict(transfers)
    .store_dict(whitelist)
    .store_dict(admins)
    .store_grams(grams)
  .end_cell());
}

;; seqno pubkey config transfers whitelist admins grams
(int, int, cell, cell, cell, cell, int) load_data() {
  slice cs = get_data().begin_parse();
  var res = (cs~load_uint(32),
            cs~load_uint(256),
            cs~load_dict(),
            cs~load_dict(),
            cs~load_dict(),
            cs~load_dict(),
            cs~load_grams());
  cs.end_parse();
  return res;
}

cell pack_config(pool_open, pool_lifetime, destination_wc, destination_addr, total_amount, min_stake, max_stake, fulfilled) {
  return begin_cell()
    .store_uint(pool_open, 32)
    .store_uint(pool_lifetime, 25) ;; limited to ~ 388 days
    .store_int(destination_wc, 8)
    .store_uint(destination_addr, 256)
    .store_grams(total_amount)
    .store_grams(min_stake)
    .store_grams(max_stake)
    .store_int(fulfilled, 1)
  .end_cell();
}

;; config -> pool_open pool_lifetime destination_wc destination_addr total_amount min_stake max_stake fulfilled
_ unpack_config(config) {
  slice cs = config.begin_parse();
  var res = (cs~load_uint(32),
            cs~load_uint(25),
            cs~load_int(8),
            cs~load_uint(256),
            cs~load_grams(),
            cs~load_grams(),
            cs~load_grams(),
            cs~load_int(1));
  cs.end_parse();
  return res;
}

cell pack_transfers(deposits, withdrawals) {
  return begin_cell()
    .store_dict(deposits)
    .store_dict(withdrawals)
  .end_cell();
}

;; transfers -> deposits withdrawals
_ unpack_transfers(transfers) {
  slice cs = transfers.begin_parse();
  var res = (cs~load_dict(),
            cs~load_dict());
  cs.end_parse();
  return res;
}

int received_grams() {
  (_, _, _, cell transfers, _, _, _) = load_data();
  (cell deposits, _) = unpack_transfers(transfers);

  int result = 0;
  ifnot (deposits.dict_empty?()) {
    slice index = begin_cell().store_int(0, 8).store_uint(0, 256).end_cell().begin_parse();
    do {
      (index, slice value, int found) = deposits.dict_get_next?(264, index);
      if (found) {
        result += value~load_grams();
      }
    } until (~ found);
  }
  return result;
}

() send_bounce_message(addr, ans_tag, query_id, body, grams, mode) impure {
  ;; int_msg_info$0 ihr_disabled:Bool bounce:Bool bounced:Bool src:MsgAddress -> 011000
  var msg = begin_cell()
    .store_uint(0x18, 6)
    .store_slice(addr)
    .store_grams(grams)
    .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
    .store_uint(ans_tag, 32)
    .store_uint(query_id, 64);
  if (body >= 0) {
    msg~store_uint(body, 32);
  }
  send_raw_message(msg.end_cell(), mode);
}

() return_stake(addr, op, query_id, reason) impure {
  send_bounce_message(addr, op, query_id, reason, 0, 64);
}

() return_excess(addr, op, query_id, comment, grams, reserved_grams) impure {
  raw_reserve(get_balance().first() - grams + reserved_grams, 0);
  send_bounce_message(addr, op, query_id, comment, 0, 128);
}

() deposit_transfer(s_addr, msg_value) impure {
  (int seqno, int pubkey, cell config, cell transfers, cell whitelist, cell admins, int grams) = load_data();
  (_, _, _, _, _, int min_stake, int max_stake, _) = unpack_config(config);
  (cell deposits, cell withdrawals) = unpack_transfers(transfers);
  (int src_wc, int src_addr) = parse_std_addr(s_addr);

  ;; whitelist check
  int whitelisted = -1;
  ifnot (whitelist.dict_empty?()) {
    (slice value, whitelisted) = whitelist.udict_get?(256, src_addr);
  }
  ifnot (whitelisted) {
    ;; not in whitelist (reason 1)
    return return_stake(s_addr, 0, 0, 1);
  }

  ;; get member stake
  int member_stake = 0;
  (slice value, int found) = deposits.dict_get?(
    264, 
    begin_cell()
      .store_int(src_wc, 8)
      .store_uint(src_addr, 256)
    .end_cell().begin_parse()
  );
  
  if (found) {
    member_stake = value~load_grams();
  }

  ;; gram amount check
  int reserved_grams = msg_value - 1000000000;
  if (member_stake + reserved_grams > max_stake) {
    ;; stake bigger (reason 2)
    return return_stake(s_addr, 0, 0, 2);
  }

  if (reserved_grams < min_stake) {
    ;; stake smaller (reason 3)
    return return_stake(s_addr, 0, 0, 3);
  }

  throw_unless(44, reserved_grams);
  accept_message();

  ;; member stake update
  member_stake += reserved_grams;
  grams += reserved_grams;

  deposits~dict_set_builder(264, 
    begin_cell()
      .store_int(src_wc, 8)
      .store_uint(src_addr, 256)
    .end_cell().begin_parse(),
    begin_cell()
      .store_grams(member_stake)
  );
  transfers = pack_transfers(deposits, withdrawals);
  store_data(seqno, pubkey, config, transfers, whitelist, admins, grams);
  return return_excess(s_addr, 0, 0, 0, msg_value, reserved_grams);
}

() withdrawal_transfer(s_addr, msg_value) impure {
  (int seqno, int pubkey, cell config, cell transfers, cell whitelist, cell admins, int grams) = load_data();
  (cell deposits, cell withdrawals) = unpack_transfers(transfers);
  (int src_wc, int src_addr) = parse_std_addr(s_addr);

  ;; grams not returned from dest addr
  if (grams == 0) {
    ;; (reason 4)
    return return_stake(s_addr, 0, 0, 4);
  }

  ;; no credit for sender
  (slice value, int found) = deposits.dict_get?(
    264, 
    begin_cell()
      .store_int(src_wc, 8)
      .store_uint(src_addr, 256)
    .end_cell().begin_parse()
  );

  ifnot (found) {
    ;; (reason 5)
    return return_stake(s_addr, 0, 0, 5);
  }

  ;; withdrawals check
  (_, int found) = withdrawals.dict_get?(
    264, 
    begin_cell()
      .store_int(src_wc, 8)
      .store_uint(src_addr, 256)
    .end_cell().begin_parse()
  );

  if (found) {
    ;; (reason 6)
    return return_stake(s_addr, 0, 0, 6);
  }

  ;; member stake update
  int member_stake = value~load_grams();
  int received_grams = received_grams();
  int part = member_stake * 10000 / received_grams;
  int amount = part * grams / 10000;

  if (received_grams == grams) {
    amount = member_stake;
  }

  withdrawals~dict_set_builder(
    264, 
    begin_cell()
      .store_int(src_wc, 8)
      .store_uint(src_addr, 256)
      .end_cell().begin_parse(),
    begin_cell()
      .store_grams(amount)
  );
  transfers = pack_transfers(deposits, withdrawals);

  store_data(seqno, pubkey, config, transfers, whitelist, admins, grams);
  ;; addr op query_id body grams mode
  return send_bounce_message(s_addr, 0, 0, 0, amount, 64);
}

() process_transfer(s_addr, msg_value) impure {
  (int seqno, int pubkey, cell config, cell transfers, cell whitelist, cell admins, int grams) = load_data();
  (int pool_open, int pool_lifetime, int destination_wc, int destination_addr, _, _, _, int fulfilled) = unpack_config(config);
  (int src_wc, int src_addr) = parse_std_addr(s_addr);

  ;; grams from destination address
  if ((src_wc == destination_wc) & (src_addr == destination_addr)) {
    grams += msg_value;
    store_data(seqno, pubkey, config, transfers, whitelist, admins, grams);
    return ();
  }

  int now = now();
  if (now < pool_open) {
    ;; pool is not start (reason 0)
    return return_stake(s_addr, 0, 0, 0);
  }

  ;; pool closed
  if (now > (pool_open + pool_lifetime) | fulfilled) {
    return withdrawal_transfer(s_addr, msg_value);
  }

  ;; pool open
  return deposit_transfer(s_addr, msg_value);
}

() send_grams(op, s_addr, cs, query_id) impure {
  (int seqno, int pubkey, cell config, cell transfers, cell whitelist, cell admins, int grams) = load_data();
  (_, int src_addr) = parse_std_addr(s_addr);

  ;; admin check
  (slice value, int found) = admins.udict_get?(256, src_addr);
  ifnot (found) {
    return return_stake(s_addr, op, query_id, op);
  }

  ;; dest addr check
  var msg_addr = cs~load_msg_addr();
  (int msg_destination_wc, int msg_destination_addr) = parse_std_addr(msg_addr);
  (int pool_open, int pool_lifetime, int destination_wc, int destination_addr,
  int total_amount, int min_stake, int max_stake, int fulfilled) = unpack_config(config);

  if ((destination_addr != 0) & ((msg_destination_addr != destination_addr) | (msg_destination_wc != destination_wc))) {
    return return_stake(s_addr, op, query_id, op);
  }

  ;; grams check
  if (grams < total_amount) {
    return return_stake(s_addr, op, query_id, op);
  }

  ;; destination address update
  config = pack_config(pool_open, pool_lifetime, msg_destination_wc, msg_destination_addr,
  total_amount, min_stake, max_stake, -1);

  ;; grams update
  store_data(seqno, pubkey, config, transfers, whitelist, admins, 0);
  return_stake(s_addr, op, query_id, op);
  ;; addr op query_id body grams mode
  return send_bounce_message(msg_addr, op, query_id, 0, grams, 3);
}

() add_whitelist(op, s_addr, cs, query_id) impure {
  (int seqno, int pubkey, cell config, cell transfers, cell whitelist, cell admins, int grams) = load_data();
  (_, int src_addr) = parse_std_addr(s_addr);

  ;; admin check
  (slice value, int found) = admins.udict_get?(256, src_addr);
  ifnot (found) {
    return return_stake(s_addr, op, query_id, op);
  }

  ;; whitelist update
  cell pubkeys = cs~load_dict();
  int index = -1;
  do {
    (index, slice value, int found) = pubkeys.udict_get_next?(256, index);
    if (found) {
      whitelist~udict_set_builder(256, index, begin_cell());
    }
  } until (~ found);

  store_data(seqno, pubkey, config, transfers, whitelist, admins, grams);
  return_stake(s_addr, op, query_id, op);
}

() del_whitelist(op, s_addr, cs, query_id) impure {
  (int seqno, int pubkey, cell config, cell transfers, cell whitelist, cell admins, int grams) = load_data();
  (_, int src_addr) = parse_std_addr(s_addr);

  ;; admin check
  (slice value, int found) = admins.udict_get?(256, src_addr);
  ifnot (found) {
    return return_stake(s_addr, op, query_id, op);
  }

  ;; whitelist update
  cell pubkeys = cs~load_dict();
  int index = -1;
  do {
    (index, slice value, int found) = pubkeys.udict_get_next?(256, index);
    if (found) {
      whitelist~udict_delete?(256, index);
    }
  } until (~ found);

  store_data(seqno, pubkey, config, transfers, whitelist, admins, grams);
  return_stake(s_addr, op, query_id, op);
}

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
  slice cs = in_msg_cell.begin_parse();
  int flags = cs~load_uint(4);  ;; int_msg_info$0 ihr_disabled:Bool bounce:Bool bounced:Bool
  if (flags & 1) {
    ;; ignore all bounced messages
    return ();
  }

  var s_addr = cs~load_msg_addr();
  if (in_msg.slice_empty?()) {
    return process_transfer(s_addr, msg_value);
  }

  int op = in_msg~load_uint(32);
  int query_id = in_msg~load_uint(64);
  if (op == 0x11111111) {
    return send_grams(op, s_addr, in_msg, query_id);
  }
  if (op == 0x22222222) {
    return add_whitelist(op, s_addr, in_msg, query_id);
  }
  if (op == 0x33333333) {
    return del_whitelist(op, s_addr, in_msg, query_id);
  }
  ifnot (op & (1 << 31)) {
    ;; unknown query, return error
    return send_bounce_message(s_addr, 0xffffffff, query_id, op, 0, 64);
  }
  ;; unknown answer, ignore
  return ();
}

() recv_external(slice in_msg) impure {
  ;; signature check
  slice signature = in_msg~load_bits(512);
  slice cs = in_msg;

  ;; load msg and storage
  int msg_seqno = cs~load_uint(32);
  (int seqno, int pubkey, cell config, cell transfers, cell whitelist, cell admins, int grams) = load_data();

  ;; exceptions
  throw_unless(33, msg_seqno == seqno);
  throw_unless(34, check_signature(slice_hash(in_msg), signature, pubkey));

  ;; init
  accept_message();
  if (seqno == 0) {
    (int pool_open, int pool_lifetime, int destination_wc, int destination_addr,
    int total_amount, int min_stake, int max_stake, int fulfilled) = unpack_config(config);
    config = pack_config(pool_open,
                        pool_lifetime,
                        destination_wc,
                        destination_addr,
                        total_amount,
                        min_stake,
                        max_stake,
                        0);
  }
  store_data(seqno + 1, pubkey, config, transfers, whitelist, admins, grams);
}

;; get methods
int seqno() method_id {
  return get_data().begin_parse().preload_uint(32);
}

_ config() method_id {
  (_, _, cell config, _, _, _, _) = load_data();
  (int pool_open, int pool_lifetime, int destination_wc, int destination_addr,
  int total_amount, int min_stake, int max_stake, int fulfilled) = unpack_config(config);

  return (pool_open, pool_lifetime, destination_wc, destination_addr, total_amount, min_stake, max_stake, fulfilled);
}

int grams() method_id {
  return received_grams();
}

_ admins() method_id {
  (_, _, _, _, _, cell admins, _) = load_data();

  var result = new_tuple();
  ifnot (admins.dict_empty?()) {
    int index = -1;
    do {
      (index, slice value, int found) = admins.udict_get_next?(256, index);
      if (found) {
        result~append_int(index);
      }
    } until (~ found);
  }
  return result;
}

_ whitelist() method_id {
  (_, _, _, _, cell whitelist, _, _) = load_data();

  var result = new_tuple();
  ifnot (whitelist.dict_empty?()) {
    int index = -1;
    do {
      (index, slice value, int found) = whitelist.udict_get_next?(256, index);
      if (found) {
        result~append_int(index);
      }
    } until (~ found);
  }
  return result;
}

_ members() method_id {
  (_, _, _, cell transfers, _, _, _) = load_data();
  (cell deposits, _) = unpack_transfers(transfers);

  var result = nil;
  ifnot (deposits.dict_empty?()) {
    slice index = begin_cell().store_int(0, 8).store_uint(0, 256).end_cell().begin_parse();
    do {
      (index, slice value, int found) = deposits.dict_get_next?(264, index);
      if (found) {
        result = cons(
          triple(index.preload_int(8), index.skip_bits(8).preload_uint(256), value~load_grams()), 
          result
        );
      }
    } until (~ found);
  }
  return result;
}

int member_stake(int src_wc, int src_addr) method_id {
  (_, _, _, cell transfers, _, _, _) = load_data();
  (cell deposits, _) = unpack_transfers(transfers);

  (slice value, int found) = deposits.dict_get?(
    264, 
    begin_cell()
      .store_int(src_wc, 8)
      .store_uint(src_addr, 256)
    .end_cell().begin_parse()
  );
  return found ? value~load_grams() : 0;
}

_ withdrawals() method_id {
  (_, _, _, cell transfers, _, _, _) = load_data();
  (_, cell withdrawals) = unpack_transfers(transfers);

  var result = nil;
  ifnot (withdrawals.dict_empty?()) {
    slice index = begin_cell().store_int(0, 8).store_uint(0, 256).end_cell().begin_parse();
    do {
      (index, slice value, int found) = withdrawals.dict_get_next?(264, index);
      if (found) {
        result = cons(
          triple(index.preload_int(8), index.skip_bits(8).preload_uint(256), value~load_grams()),
          result
        );
      }
    } until (~ found);
  }
  return result;
}

int timeleft() method_id {
  (_, _, cell config, _, _, _, _) = load_data();
  (int pool_open, int pool_lifetime, _, _, _, _, _, _) = unpack_config(config);

  int now = now();
  return ((pool_open + pool_lifetime) > now) ? (pool_open + pool_lifetime - now) : 0;
}
