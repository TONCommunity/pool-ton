#!/usr/bin/fift -s
"TonUtil.fif" include
"Asm.fif" include
"pool-code.fif" include <s =: contract_code
"pool-init-storage.fif" include <s =: pool_init_storage

{ ."usage: " @' $0 type ." <filename-base> <workchain-id> <total-amount> <min-stake> <max-stake> <pool-lifetime> <K> <admin-pubkey1> [<admin-pubkey2> ... <destination-addr>]" cr
  ."Creates a new pool in specified <workchain-id>, with private key saved to or loaded from <filename-base>.pk" cr
  ."<total-amount> - the total amount of pool;" cr
  ."<min-stake> - the minimum user contribution;" cr
  ."<max-stake> - the maximum user contribution;" cr
  ."<pool-lifetime> - the pool lifetime in sec;" cr
  ."<K> - the count of pool admins keys;" cr
  ."<admin-pubkeyN> - the public key of the pool admin;" cr
  ."<destination-addr> - the destination address of the received funds." cr 1 halt
} : usage

$# 8 < ' usage if

$1 =: filename_base
$2 parse-workchain-id =: wc
$3 $>GR =: total_amount
$4 $>GR =: min_stake
$5 $>GR =: max_stake
$6 parse-int =: pool_lifetime
$7 parse-int =: keys_length

// ----- parse admins -----
dictnew
8 {
  dup $# swap < abort"Not enough public keys were provided"
  dup $() dup (number)
    { swap drop }
    { file>B dup Blen 32 <> abort"Public key must be exactly 32 bytes long" 256 B>u@ }
    cond
  rot 256 <b b> <s 3 -roll udict! drop swap 1+
} keys_length times drop =: admins

// ----- parse destination_wc and destination_addr -----
8 keys_length + $() dup null?
  { drop 0 0 }
  { true parse-load-address drop }
  cond =: destination_addr =: destination_wc

// ----- generate keys -----
filename_base +".pk" load-generate-keypair =: privkey
256 B>u@ =: pubkey

// ----- create contract storage -----
<b dictnew dict, 0 32 u, pool_lifetime 25 u, destination_wc 8 i, destination_addr 256 u, total_amount Gram, min_stake Gram, max_stake Gram, b> =: config
pubkey config admins dictnew dictnew 0 pool_init_storage runvmdict drop =: contract_storage

// ----- build init state -----
<b b{00110} s, <b contract_code s, b> ref, contract_storage ref, b>
dup =: state_init

// ----- generate address -----
dup hashu wc swap 2=: pool_addr
."New pool wallet address = " pool_addr .addr cr
// pool_addr filename_base +".addr" save-address-verbose
."Non-bounceable address (for init): " pool_addr 7 .Addr cr
."Bounceable address (for later access): " pool_addr 6 .Addr cr

// ----- signing message -----
<b 0 32 u, b> =: message
// dup ."Signing message: " <s csr. cr
message hashu privkey ed25519_sign_uint =: signature
<b signature B, message <s s, b> <s =: init_message

// ----- generate external message ------
<b b{1000100} s, pool_addr addr, b{000010} s, state_init <s s, b{0} s, init_message s, b>
// dup ."External message for initialization is " <s csr. cr
2 boc+>B
filename_base +"-query.boc" tuck B>file
."(Saved pool creating query to file " type .")" cr
